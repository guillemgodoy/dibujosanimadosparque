#include <SFML/System.hpp>
#include <SFML/Window.hpp>
#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>

const int SCRWIDTH  = 800;
const int SCRHEIGHT = 600;


//#include <allegro.h>
#include <iostream>
#include <vector>
#include <map>
#include <string>
#include <sstream>
#include <fstream>
#include <algorithm>
#include <stack>

#include <cstdio>
#include <cstdlib>
#include <time.h>
#include <unistd.h>
#include <cmath>

using namespace std;

sf::RenderWindow window;

struct infodibujo
{
  //BITMAP *b;
  sf::Texture t;
  sf::Sprite b;
  //int media;
  //int elevacion;
};

struct infoaudio
{
  sf::SoundBuffer b;
};

map<string,infodibujo> dibujo;
map<string,infoaudio> audio;

// Pasar de entero a string.
string itosfichero(int x)
{
  string s;
  if (x==0) s="0";
  else {
    while(x>0) {
      s=string(1,char((x%10)+'0'))+s;
      x=x/10;
    }
  }
  s=string(5-int(s.size()),'0')+s;
  return s;
}

void morir(string s)
{
  cout<<s<<endl;
  //acquire_screen();
  //textout_ex(screen,font,s.c_str(),50,50,
  //	     makecol(255,0,0),makecol(0,0,0));
  //release_screen();
  //rest(4000);
  exit(0);
}

sf::Sprite &obtenerdibujo(string s)
{
  if (dibujo.count(s)==0) morir("no existe el dibujo: "+s);
  return dibujo[s].b;
}

sf::SoundBuffer &obteneraudiobuffer(string s)
{
  if (audio.count(s)==0) morir("no existe el audio: "+s);
  return audio[s].b;
}




//char listaficheros[][80]={"ojogrande","cejacae","cejav","cejaa","ceja","pelorubio","pupilaazulderecha","pupilaazulizquierda","pupilaazul",
//	"ojonormal","nariz","bocae","bocaa","bocao","bocau","bocatriste","bocaalegre","bocam","cabeza",""};

/*
void cargarlistaletras(char lista[][10])
{
  for (int i=0;string(lista[i])!="";i++) 
	dibujo[string("boca")+lista[i]].b=obtenerdibujo(string("boca")+lista[0]);
}

char listaa[][10]={"a",""};
char listae[][10]={"e","q","r","t","i","s","d","f","g","h","j","k","l","z","x","c","n",""};
char listao[][10]={"o","w",""};
char listau[][10]={"u","y",""};
char listam[][10]={"m","p","v","b",""};
*/
vector<string> leerficherosepararstrings(string nombrefichero)
{
  vector<string> v;
  ifstream ifs;
  ifs.open(nombrefichero.c_str());
  if (ifs.is_open()) {
    string s;
    while (ifs>>s)
      v.push_back(s);
    ifs.close();
  } else {
    morir("Error interno al abrir "+nombrefichero);
  }
  return v;
}

int posicionbarra(string s)
{
  for (int i=0;i<int(s.size());i++)
    if (s[i]=='/')
      return i+1;
  return 0;
}

void cargardibujos()
{
  //pantalla=create_bitmap(1000,700);
  //pantallafinal=create_bitmap(1000,700);
  system("ls graficosdibujosanimados/* >listaficheros.txt");
  vector<string> v=leerficherosepararstrings("listaficheros.txt");
  //for (int i=0;string(listaficheros[i])!="";i++) {
  //string nomaux=string(listaficheros[i])+".bmp";
  for (int i=0;i<int(v.size());i++) {
    string nomaux=v[i];
    string nomsinpng=nomaux.substr(posicionbarra(nomaux));
    nomsinpng=nomsinpng.substr(0,int(nomsinpng.size())-4);
    //dibujo[nomsinbmp].b=load_bitmap(nomaux.c_str(),NULL);
    if (!dibujo[nomsinpng].t.loadFromFile(nomaux.c_str()))
      morir("Error al leer "+nomaux);
    dibujo[nomsinpng].b.setTexture(dibujo[nomsinpng].t);
    /*
    BITMAP *b=dibujo[nomsinbmp].b;
    int colorfonsallegro=makecol(0xFF, 0, 0xFF);
    int n=b->h;
    int m=b->w;
    int colorfondo=getpixel(b,0,0);
    for (int i=0;i<n;i++)
      for (int j=0;j<m;j++)
	if (getpixel(b,j,i)==colorfondo)
	  putpixel(b,j,i,colorfonsallegro);
    */
  }
  /*
  cargarlistaletras(listaa);
  cargarlistaletras(listae);
  cargarlistaletras(listao);
  cargarlistaletras(listau);
  cargarlistaletras(listam);
  */
}

void cargaraudio()
{
  system("ls audiodibujosanimados/* >listaficheros.txt");
  vector<string> v=leerficherosepararstrings("listaficheros.txt");
  //for (int i=0;string(listaficheros[i])!="";i++) {
  //string nomaux=string(listaficheros[i])+".bmp";
  for (int i=0;i<int(v.size());i++) {
    string nomaux=v[i].substr(posicionbarra(v[i]));
    if (!audio[nomaux].b.loadFromFile(v[i].c_str()))
      morir("Error al leer "+nomaux);
  }
}

int framespersecond=30;

int stoi(string s)
{
  istringstream ci(s);
  int x;
  ci>>x;
  return x;
  /*
  string aux;
  ci>>aux;
  s=aux;
  int signo=1;
  if (int(s.size())>0 && s[0]=='-') {
    signo=-1;
    s=s.substr(1);
  }
  int r=0;
  for (int i=0;i<int(s.size());i++)
    r=r*10+s[i]-'0';
  return signo*r;
  */
}

string itos(int x)
{
  string signo="";
  if (x<0) {
    x=-x;
    signo="-";
  }
  string s(1,char(x%10+'0'));
  while (x>=10) {
    x/=10;
    s=string(1,char(x%10+'0'))+s;
  }
  return signo+s;
}

bool esnatural(string s)
{
  if (int(s.size())==0) return false;
  for (int i=0;i<int(s.size());i++)
    if (! (s[i]>='0' && s[i]<='9'))
      return false;
  return true;
}

bool esentero(string s)
{
  if (int(s.size())==0) return false;
  if (s[0]=='-') return esnatural(s.substr(1));
  return esnatural(s);
}

void morir(int linea,int columna,string s)
{
  morir("Error linea "+itos(linea+1)+" columna "+itos(columna+1)+": "+s);
}

vector<string> leerfichero(string nombrefichero)
{
  vector<string> v;
  ifstream ifs;
  ifs.open(nombrefichero.c_str());
  if (ifs.is_open()) {
    string s;
    while (getline(ifs,s)) {
      for (int i=0;i<int(s.size());i++)
	if (s[i]==13 || s[i]=='\t') s[i]=' ';
      v.push_back(s);
    }
    ifs.close();
  } else {
    morir("Error interno al abrir "+nombrefichero);
  }
  return v;
}

void saltarblancos(string &s,int &is)
{
  while (is<int(s.size()) && s[is]==' ') is++;
}

void eliminacomentarios(string &s)
{
  int is=0;
  while (is<int(s.size())-1 && !(s[is]=='/' && s[is+1]=='/')) is++;
  if (is<int(s.size())-1) s=s.substr(0,is);
}

void eliminacomentarios(vector<string> &vs)
{
  for (int i=0;i<int(vs.size());i++)
    eliminacomentarios(vs[i]);
}

vector<pair<int,string> > s2vis(string s)
{
  eliminacomentarios(s);
  vector<pair<int,string> > vis;
  int is=0;
  saltarblancos(s,is);
  while (is<int(s.size())) {
    int antis=is;
    while (is<int(s.size()) && s[is]!=' ') is++;
    vis.push_back(pair<int,string> (antis,s.substr(antis,is-antis)));
    saltarblancos(s,is);
  }
  return vis;
}

vector<vector<pair<int,string> > > vs2vvis(vector<string> &vs)
{
  vector<vector<pair<int,string> > > vvis;
  for (int i=0;i<int(vs.size());i++)
    vvis.push_back(s2vis(vs[i]));
  return vvis;
}

void escribe(vector<vector<pair<int,string> > > &vvis)
{
  for (int i=0;i<int(vvis.size());i++) {
    for (int j=0;j<int(vvis[i].size());j++)
      cout<<"("<<vvis[i][j].first<<","<<vvis[i][j].second<<")";
    cout<<endl;
  }
}

void escribe(vector<vector<string> > &vvs)
{
  for (int i=0;i<int(vvs.size());i++) {
    for (int j=0;j<int(vvs[i].size());j++)
      cout<<vvs[i][j]<<",";
    cout<<endl;
  }
}

void push_back_instruccion(vector<pair<int,string> > &vis,vector<vector<string> > &vvs)
{
  vector<string> vs;
  for (int i=0;i<int(vis.size());i++)
    vs.push_back(vis[i].second);
  vvs.push_back(vs);
}

void transformainstruccion(int linea,vector<pair<int,string> > &vis,vector<vector<string> > &vvs)
{
  if (int(vis.size())==0) return;
  int columna=vis[0].first;
  if (vis[0].second=="letras") {
    if (int(vis.size())!=2)
      morir(linea,columna,vis[0].second+" requiere 'listaletras'.");
    push_back_instruccion(vis,vvs);
  } else if (vis[0].second=="coloca" || vis[0].second=="centra" || vis[0].second=="escala") {
    if (int(vis.size())!=4 || ! esnatural(vis[2].second) || ! esnatural(vis[3].second))
      morir(linea,columna,vis[0].second+" requiere 'idpersonaje' 'xfin' 'yfin'.");
    push_back_instruccion(vis,vvs);
  } else if (vis[0].second=="elimina") {
    if (int(vis.size())!=2)
      morir(linea,columna,vis[0].second+" requiere 'idpersonaje'.");
    push_back_instruccion(vis,vvs);
  } else if (vis[0].second=="quita") {
    if (int(vis.size())!=3)
      morir(linea,columna,vis[0].second+" requiere 'idpersonaje' 'idcaracteristica'.");
    push_back_instruccion(vis,vvs);
  } else if (vis[0].second=="habla") {
    if (int(vis.size())!=4 || esnatural(vis[2].second))
      morir(linea,columna,vis[0].second+" requiere 'idpersonaje' 'frase' ('tiempo'||'fichero').");
    push_back_instruccion(vis,vvs);
  } else if (vis[0].second=="mueve" || vis[0].second=="mueveconcamara") {
    if (int(vis.size())!=5 || ! esnatural(vis[2].second) || ! esnatural(vis[3].second) ||
	! esnatural(vis[4].second))
      morir(linea,columna,vis[0].second+" requiere 'idpersonaje' 'xfin' 'yfin' 'tiempo'.");
    push_back_instruccion(vis,vvs);
  } else if (vis[0].second=="camara") {
    if (int(vis.size())!=5 || ! esnatural(vis[1].second) || ! esnatural(vis[2].second) ||
	! esnatural(vis[3].second) || ! esnatural(vis[4].second))
      morir(linea,columna,vis[0].second+" requiere 'xini' 'yini' 'ancho' 'alto'.");
    push_back_instruccion(vis,vvs);
  } else if (vis[0].second=="luz") {
    if (int(vis.size())!=3 || ! esnatural(vis[1].second) ||
	stoi(vis[1].second)>=256 || ! esnatural(vis[2].second))
      morir(linea,columna,vis[0].second+" requiere 'iluminacionfinal<256' 'tiempo'.");
    push_back_instruccion(vis,vvs);
  } else if (vis[0].second=="definecolor") {
    if (int(vis.size())!=5 || ! esnatural(vis[2].second) || ! esnatural(vis[3].second) ||
	! esnatural(vis[4].second) || stoi(vis[2].second)>=256 || stoi(vis[3].second)>=256
	|| stoi(vis[4].second)>=256)
      morir(linea,columna,vis[0].second+" requiere 'idcolor' 'R<256' 'G<256' 'B<256'.");
    push_back_instruccion(vis,vvs);
  } else if (vis[0].second=="color") {
    if (int(vis.size())!=4)
      morir(linea,columna,vis[0].second+" requiere 'idpersonaje' 'idcaracteristica' 'idcolor'.");
    push_back_instruccion(vis,vvs);
  } else if (vis[0].second=="forma") {
    if (int(vis.size())!=4)
      morir(linea,columna,vis[0].second+" requiere 'idpersonaje' 'idcaracteristica' 'forma'.");
    push_back_instruccion(vis,vvs);
  } else if (vis[0].second=="fps") {
    if (int(vis.size())!=2 || ! esnatural(vis[1].second))
      morir(linea,columna,vis[0].second+" requiere 'framespersecond'.");
    framespersecond=stoi(vis[1].second);
  } else if (vis[0].second=="ventana") {
    if (int(vis.size())!=3 || ! esnatural(vis[1].second) || ! esnatural(vis[2].second))
      morir(linea,columna,vis[0].second+" requiere 'ancho' 'alto'.");
    window.setSize(sf::Vector2u(stoi(vis[1].second),stoi(vis[2].second)));
  } else if (vis[0].second=="profundidad") {
    if (int(vis.size())!=4 || ! esentero(vis[3].second))
      morir(linea,columna,vis[0].second+" requiere 'idpersonaje' 'idcaracteristica' 'profundidad(entero)'.");
    push_back_instruccion(vis,vvs);
  } else if (vis[0].second=="flip") {
    if (int(vis.size())!=2)
      morir(linea,columna,vis[0].second+" requiere 'idpersonaje'.");
    push_back_instruccion(vis,vvs);
  } else if (vis[0].second=="tiempo") {
    if (int(vis.size())!=2 || ! esnatural(vis[1].second))
      morir(linea,columna,vis[0].second+" requiere 'tiempo'.");
    push_back_instruccion(vis,vvs);
  } else
    morir(linea,columna,"'"+vis[0].second+"' no es una instruccion valida.");
}

vector<vector<string> > transformainstrucciones(vector<vector<pair<int,string> > > &vvis)
{
  vector<vector<string> > vvs;
  for (int i=0;i<int(vvis.size());i++)
    transformainstruccion(i,vvis[i],vvs);
  return vvs;
}

void transformaaframes(string &s)
{
  s=itos(stoi(s)/framespersecond);
}

void transformaaframes(vector<string> &vs)
{
  if (vs[0]=="habla" and esnatural(vs[3])) transformaaframes(vs[3]);
  else if (vs[0]=="mueve" || vs[0]=="mueveconcamara") transformaaframes(vs[4]);
  else if (vs[0]=="tiempo") transformaaframes(vs[1]);
  else if (vs[0]=="luz") transformaaframes(vs[2]);
}

void transformaaframes(vector<vector<string> > &vvs)
{
  for (int i=0;i<int(vvs.size());i++)
    transformaaframes(vvs[i]);
}

// El estado tiene unas coordenadas de camara,
// y un map de personajes a un struct con un map
// de nombre de caracteristica a forma, y un map de nombre de caracteristica
// a color.

struct estadopersonaje {
  int x,y;
  int xcentro,ycentro;
  int xescala,yescala;
  int flip;
  map<string,string> caracteristica2forma;
  map<string,int> caracteristica2profundidad;
  map<string,int> caracteristica2color;

  estadopersonaje() {
    x=y=xcentro=ycentro=flip=0;
    xescala=yescala=100;
  }
};

struct estadogeneral {
  int xcamara,ycamara,anchocamara,altocamara,luz;
  map<string,estadopersonaje> p;
  estadogeneral() {
    xcamara=ycamara=0;
    anchocamara=1000;
    altocamara=700;
    luz=255;
  }
};

void escribe(estadopersonaje &p)
{
  cout<<"x: "<<p.x<<endl;
  cout<<"y: "<<p.y<<endl;
  cout<<"flip: "<<p.flip<<endl;
  for (map<string,string>::iterator it=p.caracteristica2forma.begin();it!=p.caracteristica2forma.end();it++)
    cout<<"("<<it->first<<","<<it->second<<")";
  cout<<endl;
  for (map<string,int>::iterator it=p.caracteristica2profundidad.begin();it!=p.caracteristica2profundidad.end();it++)
    cout<<"("<<it->first<<","<<it->second<<")";
  cout<<endl;
}

void escribe(estadogeneral &e)
{
  cout<<"----------------------------"<<endl;
  cout<<"----------------------------"<<endl;
  cout<<"xcamara:"<<e.xcamara<<endl;
  cout<<"ycamara:"<<e.ycamara<<endl;
  cout<<"anchocamara:"<<e.anchocamara<<endl;
  cout<<"altocamara:"<<e.altocamara<<endl;
  cout<<"luz:"<<e.luz<<endl;
  for (map<string,estadopersonaje>::iterator it=e.p.begin();it!=e.p.end();it++) {
    cout<<"- Personaje "<<it->first<<endl;
    escribe(it->second);
  }
}

void escribe(vector<estadogeneral> &ve)
{
  for (int i=0;i<int(ve.size());i++)
    escribe(ve[i]);
}

void transformaaestados(vector<string> &vs,vector<estadogeneral> &ve,estadogeneral &e,
			map<string,int> &color,map<char,char> &letra2letra,
			vector<pair<int,string> > &listaaudios)
{
  if (vs[0]=="habla") {
    estadopersonaje &p=e.p[vs[1]];
    string frase=vs[2];
    int numframes;
    if (esnatural(vs[3]))
      numframes=stoi(vs[3]);
    else {
      sf::SoundBuffer soundbuffer=obteneraudiobuffer(vs[3]);
      numframes=int(soundbuffer.getDuration().asMilliseconds())*framespersecond/1000;
      listaaudios.push_back(pair<int,string> (int(ve.size()),vs[3]));
    }
    string &forma=p.caracteristica2forma["boca"];
    if (forma=="" || int(forma.size())>1) forma="a";
    char &c=forma[int(forma.size())-1];
    if (numframes<=0) {
      c=letra2letra[frase[int(frase.size())-1]];
    } else if (numframes==1) {
      c=letra2letra[frase[int(frase.size())-1]];
      ve.push_back(e);
    } else {
      for (int frame=0;frame<numframes;frame++) {
	c=letra2letra[frase[int(frase.size())*frame/numframes]];
	ve.push_back(e);
      }
      c=letra2letra[frase[int(frase.size())-1]];
    }
  } else if (vs[0]=="mueve" || vs[0]=="mueveconcamara") {
    estadopersonaje &p=e.p[vs[1]];
    int &x=p.x;
    int &y=p.y;
    int xini=x;
    int yini=y;
    int xfin=stoi(vs[2]);
    int yfin=stoi(vs[3]);
    int numframes=stoi(vs[4]);
    int &xcamara=e.xcamara;
    int &ycamara=e.ycamara;
    int despxcamara=xcamara-x;
    int despycamara=ycamara-y;
    if (numframes<=0) {
      x=xfin;
      y=yfin;
      if (vs[0]=="mueveconcamara") {
	xcamara=x+despxcamara;
	ycamara=y+despycamara;
      }
    } else if (numframes==1) {
      x=xfin;
      y=yfin;
      if (vs[0]=="mueveconcamara") {
	xcamara=x+despxcamara;
	ycamara=y+despycamara;
      }
      ve.push_back(e);
    } else {
      for (int frame=0;frame<numframes;frame++) {
	x=(xini*(numframes-1-frame)+xfin*frame)/(numframes-1);
	y=(yini*(numframes-1-frame)+yfin*frame)/(numframes-1);
	if (vs[0]=="mueveconcamara") {
	  xcamara=x+despxcamara;
	  ycamara=y+despycamara;
	}
	ve.push_back(e);
      }
    }
  } else if (vs[0]=="coloca") {
    estadopersonaje &p=e.p[vs[1]];
    p.x=stoi(vs[2]);
    p.y=stoi(vs[3]);
  } else if (vs[0]=="centra") {
    estadopersonaje &p=e.p[vs[1]];
    p.xcentro=stoi(vs[2]);
    p.ycentro=stoi(vs[3]);
  } else if (vs[0]=="escala") {
    estadopersonaje &p=e.p[vs[1]];
    p.xescala=stoi(vs[2]);
    p.yescala=stoi(vs[3]);
  } else if (vs[0]=="elimina") {
    e.p.erase(vs[1]);
  } else if (vs[0]=="quita") {
    estadopersonaje &p=e.p[vs[1]];
    p.caracteristica2forma.erase(vs[2]);
  } else if (vs[0]=="luz") {
    int luzini=e.luz;
    int luzfin=stoi(vs[1]);
    int numframes=stoi(vs[2]);
    if (numframes<=0) {
      e.luz=luzfin;
    } else if (numframes==1) {
      e.luz=luzfin;
      ve.push_back(e);
    } else {
      for (int frame=0;frame<numframes;frame++) {
	e.luz=(luzini*(numframes-1-frame)+luzfin*frame)/(numframes-1);
	ve.push_back(e);
      }
    }
  } else if (vs[0]=="tiempo") {
    int numframes=stoi(vs[1]);
    for (int i=0;i<numframes;i++)
      ve.push_back(e);
  } else if (vs[0]=="letras") {
    string &letras=vs[1];
    for (int i=0;i<int(letras.size());i++)
      letra2letra[letras[i]]=letras[0];
  } else if (vs[0]=="camara") {
    e.xcamara=stoi(vs[1]);
    e.ycamara=stoi(vs[2]);
    e.anchocamara=stoi(vs[3]);
    e.altocamara=stoi(vs[4]);
  } else if (vs[0]=="definecolor") {
    //color[vs[1]]=makecol(stoi(vs[2]),stoi(vs[3]),stoi(vs[4]));
  } else if (vs[0]=="color") {
    e.p[vs[1]].caracteristica2color[vs[2]]=color[vs[3]];
  } else if (vs[0]=="forma") {
    e.p[vs[1]].caracteristica2forma[vs[2]]=vs[3];
  } else if (vs[0]=="profundidad") {
    e.p[vs[1]].caracteristica2profundidad[vs[2]]=stoi(vs[3]);
  } else if (vs[0]=="flip") {
    e.p[vs[1]].flip^=1;
  }
}

void transformaaestados(vector<vector<string> > &vvs,vector<estadogeneral> &ve,
			vector<pair<int,string> > &listaaudios)
{
  estadogeneral e;
  e.xcamara=window.getSize().x/2;
  e.ycamara=window.getSize().y/2;
  e.anchocamara=window.getSize().x;
  e.altocamara=window.getSize().y;

  map<string,int> color;
  map<char,char> letra2letra;
  for (int i=0;i<int(vvs.size());i++)
    transformaaestados(vvs[i],ve,e,color,letra2letra,listaaudios);
}

// El estado se convertira en un primer paso en una lista de planes de dibujo.
// Estos planes de dibujo se ordenan por profundidad. Despues, se dibujan por orden.
// Finalmente, se usan xcamara,ycamara para pillar la parte que interesa.

struct plandibujo {
  int x,y;
  int xcentro,ycentro;
  int xescala,yescala;
  int flip;
  int profundidad;
  int color;
  string dibujo;
  plandibujo() {
  }
  plandibujo(int inx,int iny,int inxcentro,int inycentro,int inxescala,int inyescala,int inflip,
	     int inprofundidad,int incolor,string indibujo) {
    x=inx;y=iny;xcentro=inxcentro;ycentro=inycentro;xescala=inxescala;yescala=inyescala;flip=inflip;
    profundidad=inprofundidad;color=incolor;dibujo=indibujo;
  }
};

void escribe(plandibujo &p)
{
  cout<<"x: "<<p.x<<endl;
  cout<<"y: "<<p.y<<endl;
  cout<<"flip: "<<p.flip<<endl;
  cout<<"profundidad: "<<p.profundidad<<endl;
  cout<<"color: "<<p.color<<endl;
  cout<<"dibujo: "<<p.dibujo<<endl;
}

void escribe(vector<plandibujo> &vp)
{
  for (int i=0;i<int(vp.size());i++)
    escribe(vp[i]);
}

bool operator<(plandibujo d1,plandibujo d2)
{
  return d1.profundidad<d2.profundidad;
}

void transformaaplandibujo(estadopersonaje &p,vector<plandibujo> &vp)
{
  for (map<string,string>::iterator it=p.caracteristica2forma.begin();it!=p.caracteristica2forma.end();it++)
    vp.push_back(plandibujo(p.x,p.y,p.xcentro,p.ycentro,p.xescala,p.yescala,
			    p.flip,p.caracteristica2profundidad[it->first],
			    p.caracteristica2color[it->first],
			    it->first+it->second));
}

vector<plandibujo> transformaaplandibujo(estadogeneral &e)
{
  vector<plandibujo> vp;
  for (map<string,estadopersonaje>::iterator it=e.p.begin();it!=e.p.end();it++)
    transformaaplandibujo(it->second,vp);
  sort(vp.begin(),vp.end());
  return vp;
}

void cargarve(vector<estadogeneral> &ve,vector<pair<int,string> > &listaaudios)
{
  vector<string> vs=leerfichero("comandos.txt");
  vector<vector<pair<int,string> > > vvis=vs2vvis(vs);
  //escribe(vvis);
  vector<vector<string> > vvs=transformainstrucciones(vvis);
  transformaaframes(vvs);
  //cout<<endl;
  //escribe(vvs);
  transformaaestados(vvs,ve,listaaudios);
  //escribe(ve);
}


void dibujarestadogeneral(estadogeneral &e,int numframe)
{
  window.clear(sf::Color::Black);
  //rectfill(pantalla,0,0,1000,700,makecol(30,0,0));
  vector<plandibujo> vp=transformaaplandibujo(e);
  //cout<<endl<<endl;
  //escribe(vp);
  for (int i=0;i<int(vp.size());i++) {
    plandibujo &p=vp[i];
    //draw_sprite(pantalla,obtenerdibujo(p.dibujo),p.x,p.y);
    sf::Sprite &d=obtenerdibujo(p.dibujo);
    sf::Transform t = sf::Transform::Identity;
    d.setOrigin(p.xcentro,p.ycentro);
    d.setPosition(p.x,p.y);
    d.setScale(p.xescala/100.0,p.yescala/100.0);
    window.draw(d,t);
  }
  sf::View view;
  view.setCenter(sf::Vector2f(e.xcamara,e.ycamara));
  view.setSize(sf::Vector2f(e.anchocamara,e.altocamara));
  window.setView(view);

  window.display();
  //stretch_blit(portatil,pantalla,0,0,portatil->w,portatil->h,180,400,130,100);
  //stretch_blit(portatil,pantalla,0,0,portatil->w,portatil->h,650,400,130,100);
  //draw_sprite(pantalla,obtenerdibujo("portatil"),650,400);
  /*
  if (e.luz!=255) {
    for (int x=0;x<1000;x++) {
      for (int y=0;y<700;y++) {
	int color=getpixel(pantalla,x,y);
	putpixel(pantalla,x,y,makecol(getr(color)*e.luz/255,getg(color)*e.luz/255,getb(color)*e.luz/255));
      }
    }
  }
  string s="FRAME: "+itos(numframe);
  textout_ex(pantalla,font,s.c_str(),10,10,
	       makecol(255,0,0),makecol(0,0,0));
  */
}

int main()
{
  //allegro_init();
  //install_keyboard();
  //install_timer();
  //set_color_depth(24);
  ////set_gfx_mode( GFX_AUTODETECT, 1280, 800, 0, 0);
  //set_gfx_mode( GFX_AUTODETECT, 1000, 700, 0, 0);
  //install_sound(DIGI_AUTODETECT,MIDI_NONE,NULL);
  
  //set_uformat(U_UTF8);

  //system("del bmps\\*.bmp");

  cargardibujos();
  cargaraudio();

  sf::Sound sound;

  window.create(sf::VideoMode(1000,700),"Dibujos animados");



  vector<estadogeneral> ve;
  vector<pair<int,string> > listaaudios;

  cargarve(ve,listaaudios);

  
  int ilistaaudios=0;

  for (int i=0;i<int(ve.size()) /*&& !key[KEY_ESC]*/;i++) {
    sf::Event event;
    while (window.pollEvent(event)) {
      switch (event.type) {
      case sf::Event::Closed:
	window.close();
	exit(0);
	break;
      case sf::Event::KeyPressed:
	if (event.key.code == sf::Keyboard::Escape) {
	  window.close();
	  exit(0);
	}
	break;
      default:
	break;
      }
    }
    
    if (ilistaaudios<int(listaaudios.size()) and listaaudios[ilistaaudios].first==i) {
      sound.setBuffer(obteneraudiobuffer(listaaudios[ilistaaudios++].second));
      sound.play();
    }
    
    dibujarestadogeneral(ve[i],i);

    //acquire_screen();
    
    //draw_sprite( screen, pantalla, 0, 0);
    
    //release_screen();
    
    //string nombrefichero="bmps\\f"+itosfichero(i)+".bmp";
    //save_bitmap(nombrefichero.c_str(),pantalla,NULL);
    
    //clear_keybuf();
    //rest(100);
    //rest(1000/framespersecond);
    
    usleep(1000000/framespersecond);
  }
  
  //return 0;
    
}   
//END_OF_MAIN();


